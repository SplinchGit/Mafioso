AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Mafioso - Backend API and Database Infrastructure

Globals:
  Function:
    Timeout: 30
    Runtime: nodejs18.x
    Environment:
      Variables:
        PLAYERS_TABLE: !Ref PlayersTable
        WORLD_ID_TABLE: !Ref WorldIdTable
        NONCES_TABLE: !Ref NoncesTable
        COOLDOWNS_TABLE: !Ref CooldownsTable
        CRIME_HISTORY_TABLE: !Ref CrimeHistoryTable
        JWT_SECRET_ARN: !Ref JWTSecretArn
        WORLD_ID_SECRET_ARN: !Ref WorldIdSecretArn
        WORLD_ID_APP_ID: !Ref WorldIdAppId

Parameters:
  Stage:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Deployment stage
  
  JWTSecretArn:
    Type: String
    Description: ARN of the JWT secret in AWS Secrets Manager
    Default: ""
  
  WorldIdSecretArn:
    Type: String
    Description: ARN of the World ID API key secret in AWS Secrets Manager
    Default: ""
  
  WorldIdAppId:
    Type: String
    Description: World ID App ID
    Default: app_bc75ea0f4623eb64e1814126df474de3

Resources:
  # API Gateway
  MafiosoApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"
        AllowCredentials: false

  # Lambda Functions
  VerifyWorldIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../backend/dist/backend/functions/auth/
      Handler: verifyWorldId.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref WorldIdTable
        - CloudWatchLogsFullAccess
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !Ref JWTSecretArn
                - !Ref WorldIdSecretArn
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLogGroups
                - logs:DescribeLogStreams
              Resource: 
                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mafioso*"
      Events:
        VerifyWorldId:
          Type: Api
          Properties:
            RestApiId: !Ref MafiosoApi
            Path: /auth/verify-worldid
            Method: post

  VerifyMiniKitFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../backend/dist/backend/functions/auth/
      Handler: verifyMiniKit.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref WorldIdTable
        - CloudWatchLogsFullAccess
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !Ref JWTSecretArn
                - !Ref WorldIdSecretArn
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLogGroups
                - logs:DescribeLogStreams
              Resource: 
                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mafioso*"
      Events:
        VerifyMiniKit:
          Type: Api
          Properties:
            RestApiId: !Ref MafiosoApi
            Path: /auth/verify-minikit
            Method: post
        VerifyMiniKitOptions:
          Type: Api
          Properties:
            RestApiId: !Ref MafiosoApi
            Path: /auth/verify-minikit
            Method: options

  NonceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../backend/dist/backend/functions/auth/
      Handler: nonce.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NoncesTable
        - CloudWatchLogsFullAccess
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !Ref JWTSecretArn
                - !Ref WorldIdSecretArn
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLogGroups
                - logs:DescribeLogStreams
              Resource: 
                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mafioso*"
      Events:
        GetNonce:
          Type: Api
          Properties:
            RestApiId: !Ref MafiosoApi
            Path: /auth/nonce
            Method: get

  WalletLoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../backend/dist/backend/functions/auth/
      Handler: walletLogin.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref NoncesTable
        - CloudWatchLogsFullAccess
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !Ref JWTSecretArn
                - !Ref WorldIdSecretArn
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLogGroups
                - logs:DescribeLogStreams
              Resource: 
                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mafioso*"
      Events:
        WalletLogin:
          Type: Api
          Properties:
            RestApiId: !Ref MafiosoApi
            Path: /auth/wallet-login
            Method: post

  CreateAccountFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../backend/dist/backend/functions/auth/
      Handler: createAccount.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
        - CloudWatchLogsFullAccess
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !Ref JWTSecretArn
                - !Ref WorldIdSecretArn
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLogGroups
                - logs:DescribeLogStreams
              Resource: 
                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mafioso*"
      Events:
        CreateAccount:
          Type: Api
          Properties:
            RestApiId: !Ref MafiosoApi
            Path: /auth/create-account
            Method: post

  CheckUsernameFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../backend/dist/backend/functions/auth/
      Handler: checkUsername.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
        - CloudWatchLogsFullAccess
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !Ref JWTSecretArn
                - !Ref WorldIdSecretArn
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLogGroups
                - logs:DescribeLogStreams
              Resource: 
                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mafioso*"
      Events:
        CheckUsername:
          Type: Api
          Properties:
            RestApiId: !Ref MafiosoApi
            Path: /auth/check-username
            Method: get

  ValidateTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../backend/dist/backend/functions/auth/
      Handler: validateToken.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
        - CloudWatchLogsFullAccess
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !Ref JWTSecretArn
                - !Ref WorldIdSecretArn
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLogGroups
                - logs:DescribeLogStreams
              Resource: 
                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mafioso*"
      Events:
        ValidateToken:
          Type: Api
          Properties:
            RestApiId: !Ref MafiosoApi
            Path: /auth/validate
            Method: get

  CommitCrimeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../backend/dist/backend/functions/crimes/
      Handler: commitCrime.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CooldownsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CrimeHistoryTable
        - CloudWatchLogsFullAccess
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !Ref JWTSecretArn
                - !Ref WorldIdSecretArn
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLogGroups
                - logs:DescribeLogStreams
              Resource: 
                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mafioso*"
      Events:
        CommitCrime:
          Type: Api
          Properties:
            RestApiId: !Ref MafiosoApi
            Path: /crimes/commit
            Method: post

  # Player Functions
  BuyGunFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../backend/dist/backend/functions/player/
      Handler: buyGun.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
        - CloudWatchLogsFullAccess
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !Ref JWTSecretArn
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLogGroups
                - logs:DescribeLogStreams
              Resource: 
                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mafioso*"
      Events:
        BuyGun:
          Type: Api
          Properties:
            RestApiId: !Ref MafiosoApi
            Path: /player/buy-gun
            Method: post

  BuyProtectionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../backend/dist/backend/functions/player/
      Handler: buyProtection.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
        - CloudWatchLogsFullAccess
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !Ref JWTSecretArn
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLogGroups
                - logs:DescribeLogStreams
              Resource: 
                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mafioso*"
      Events:
        BuyProtection:
          Type: Api
          Properties:
            RestApiId: !Ref MafiosoApi
            Path: /player/buy-protection
            Method: post

  SwissBankFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../backend/dist/backend/functions/player/
      Handler: swissBank.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
        - CloudWatchLogsFullAccess
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !Ref JWTSecretArn
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLogGroups
                - logs:DescribeLogStreams
              Resource: 
                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mafioso*"
      Events:
        SwissBank:
          Type: Api
          Properties:
            RestApiId: !Ref MafiosoApi
            Path: /player/swiss-bank
            Method: post

  TravelFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../backend/dist/backend/functions/player/
      Handler: travel.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
        - CloudWatchLogsFullAccess
      Environment:
        Variables:
          JWT_SECRET: !Ref JwtSecret
          PLAYERS_TABLE: !Ref PlayersTable
      Events:
        Travel:
          Type: Api
          Properties:
            RestApiId: !Ref MafiosoApi
            Path: /player/travel
            Method: post

  # Combat Functions
  SearchPlayerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../backend/dist/backend/functions/combat/
      Handler: searchPlayer.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
        - CloudWatchLogsFullAccess
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !Ref JWTSecretArn
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLogGroups
                - logs:DescribeLogStreams
              Resource: 
                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mafioso*"
      Events:
        SearchPlayer:
          Type: Api
          Properties:
            RestApiId: !Ref MafiosoApi
            Path: /combat/search-player
            Method: post

  ShootPlayerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../backend/dist/backend/functions/combat/
      Handler: shootPlayer.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
        - CloudWatchLogsFullAccess
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !Ref JWTSecretArn
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLogGroups
                - logs:DescribeLogStreams
              Resource: 
                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mafioso*"
      Events:
        ShootPlayer:
          Type: Api
          Properties:
            RestApiId: !Ref MafiosoApi
            Path: /combat/shoot-player
            Method: post

  CancelSearchFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../backend/dist/backend/functions/combat/
      Handler: cancelSearch.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
        - CloudWatchLogsFullAccess
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !Ref JWTSecretArn
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLogGroups
                - logs:DescribeLogStreams
              Resource: 
                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mafioso*"
      Events:
        CancelSearch:
          Type: Api
          Properties:
            RestApiId: !Ref MafiosoApi
            Path: /combat/cancel-search
            Method: post

  # Garage Functions
  GetCarsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../backend/dist/backend/functions/garage/
      Handler: getCars.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
        - CloudWatchLogsFullAccess
      Environment:
        Variables:
          JWT_SECRET: !Ref JwtSecret
          PLAYERS_TABLE: !Ref PlayersTable
      Events:
        GetCars:
          Type: Api
          Properties:
            RestApiId: !Ref MafiosoApi
            Path: /garage/cars
            Method: get

  RepairCarFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../backend/dist/backend/functions/garage/
      Handler: repairCar.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
        - CloudWatchLogsFullAccess
      Environment:
        Variables:
          JWT_SECRET: !Ref JwtSecret
          PLAYERS_TABLE: !Ref PlayersTable
      Events:
        RepairCar:
          Type: Api
          Properties:
            RestApiId: !Ref MafiosoApi
            Path: /garage/repair
            Method: post

  MeltCarFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../backend/dist/backend/functions/garage/
      Handler: meltCar.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
        - CloudWatchLogsFullAccess
      Environment:
        Variables:
          JWT_SECRET: !Ref JwtSecret
          PLAYERS_TABLE: !Ref PlayersTable
      Events:
        MeltCar:
          Type: Api
          Properties:
            RestApiId: !Ref MafiosoApi
            Path: /garage/melt
            Method: post

  # DynamoDB Tables
  PlayersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'mafioso-${Stage}-players'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: walletAddress
          AttributeType: S
        - AttributeName: username
          AttributeType: S
      KeySchema:
        - AttributeName: walletAddress
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: username-index
          KeySchema:
            - AttributeName: username
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  WorldIdTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'mafioso-${Stage}-worldid'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: nullifierHash
          AttributeType: S
      KeySchema:
        - AttributeName: nullifierHash
          KeyType: HASH

  NoncesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'mafioso-${Stage}-nonces'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: nonce
          AttributeType: S
      KeySchema:
        - AttributeName: nonce
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: expiresAt
        Enabled: true

  CooldownsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'mafioso-${Stage}-cooldowns'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: playerId
          AttributeType: S
        - AttributeName: crimeId
          AttributeType: N
      KeySchema:
        - AttributeName: playerId
          KeyType: HASH
        - AttributeName: crimeId
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: expiresAt
        Enabled: true

  CrimeHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'mafioso-${Stage}-crime-history'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${MafiosoApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}'